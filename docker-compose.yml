# Copyright Â© 2025 Jalapeno Labs

services:
  langgraph:
    build:
      context: langgraph
    container_name: elysia-langgraph
    restart: unless-stopped
    command: tail -f /dev/null
    volumes:
      - ./langgraph/src:/app/src
      - ./langgraph/templates:/app/templates
      - ./langgraph/pyproject.toml:/app/pyproject.toml
      - ./langgraph/poetry.lock:/app/poetry.lock
    environment:
      PYTHONUNBUFFERED: "1"
      OPENAI_API_TOKEN: ${OPENAI_API_TOKEN}
    networks:
      - main
      - database


  # voice:
  #   build:
  #     context: .
  #     dockerfile: voice/Dockerfile
  #   container_name: elysia-voice
  #   restart: unless-stopped
  #   command: yarn tsx watch voice/src/index.ts
  #   volumes:
  #     - ./voice/src:/app/voice/src
  #     - ./voice/tsconfig.json:/app/voice/tsconfig.json
  #     - ./voice/package.json:/app/voice/package.json
  #     - ./voice/yarn.lock:/app/voice/yarn.lock
  #     - ./library:/app/library
  #     - ./global.d.ts:/app/global.d.ts
  #     - ./tsconfig.json:/app/tsconfig.json
  #     - ./package.json:/app/package.json
  #     - ./yarn.lock:/app/yarn.lock
  #   devices:
  #     - "/dev/snd:/dev/snd"
  #   environment:
  #     WHISPER_HOST: elysia-whisperlive
  #     WHISPER_PORT: 9090
    # environment:
    #   DATABASE_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@database:5432/elysia
    #   DB_USER: ${POSTGRES_USER}
    #   DB_PASSWORD: ${POSTGRES_PASSWORD}
    #   DB_DEFAULT: elysia
    #   DB_PORT: 5432
    #   MODE: development

  # transcription:
  #   build:
  #     context: transcription
  #   container_name: elysia-transcription
  #   restart: unless-stopped
  #   environment:
  #     PULSE_SERVER: host.docker.internal

  # whisperlive:
  #   image: ghcr.io/collabora/whisperlive-cpu:latest
  #   container_name: elysia-whisperlive
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"

  # nginx:
  #   image: nginx:1.27.3
  #   container_name: elysia-proxy
  #   restart: unless-stopped
  #   depends_on:
  #     - whisper
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./certs:/etc/nginx/certs:ro
  #     - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
  #     - ./config/nginx/.htpasswd:/etc/nginx/.htpasswd:ro
  #   healthcheck:
  #     test: ["CMD-SHELL", "echo > /dev/tcp/localhost/80"]
  #     interval: 2s
  #     timeout: 10s
  #     retries: 15
  #     start_period: 1s

  database:
    image: postgres:17.4
    container_name: elysia-database
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: elysia
    volumes:
      - $PWD/config/db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
      - $PWD/config/db/auth_schema.sql:/docker-entrypoint-initdb.d/auth_schema.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $DB_USER"]
      interval: 2s
      timeout: 4s
      retries: 5
      start_period: 1s
    networks:
      - database

  # This should only be used in dev!
  # In prod, Nginx should serve the statically generated files.
  # frontend:
  #   container_name: elysia-frontend
  #   build:
  #     context: frontend
  #   volumes:
  #     - ./frontend/package.json:/app/package.json
  #     - ./frontend/yarn.lock:/app/yarn.lock
  #     - ./frontend/index.html:/app/index.html
  #     - ./frontend/tsconfig.json:/app/tsconfig.json
  #     - ./frontend/vite.config.ts:/app/vite.config.ts
  #     - ./frontend/src/:/app/src/
  #     - ./frontend/public/:/app/public/

  # whisper:
  #   image: onerahmet/openai-whisper-asr-webservice:latest
  #   container_name: elysia-whisper
  #   restart: unless-stopped
  #   # gpus: all
  #   environment:
  #     ASR_MODEL: base
  #     ASR_ENGINE: openai_whisper
  #   ports:
  #     - 9000:9000
  #   volumes:
  #     - whisper_cache:/root/.cache/

  # pgadmin:
  #   image: dpage/pgadmin4:latest
  #   container_name: elysia-pgadmin
  #   restart: unless-stopped
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: elysia@email.com
  #     PGADMIN_DEFAULT_PASSWORD: elysia
  #     PGADMIN_CONFIG_SERVER_MODE: "False"
  #   volumes:
  #     - pgadmin_data:/var/lib/pgadmin
  #   ports:
  #     - 5433:80
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD-SHELL", "echo > /dev/tcp/localhost/80"]
  #     interval: 3s
  #     timeout: 10s
  #     retries: 15
  #     start_period: 5s

  # backend:
  #   build:
  #     context: ../backend
  #     dockerfile: docker/Dockerfile.dev
  #   container_name: elysia-backend
  #   restart: unless-stopped
  #   volumes:
  #     - $PWD/../backend/:/app
  #     - $PWD/config/:/config
  #     - $PWD/data/songs/:/songs
  #     - $PWD/data/performances/:/performances
  #   environment:
  #     DATABASE_URL: postgres://$DB_USER:$DB_PASSWORD@db:5432/$DB_DEFAULT
  #     DB_USER: $DB_USER
  #     DB_PASSWORD: $DB_PASSWORD
  #     DB_DEFAULT: $DB_DEFAULT
  #     DB_PORT: 5432
  #     KEYCLOAK_PROTOCOL: https
  #     KEYCLOAK_HOST: keycloak
  #     KEYCLOAK_PORT: 8443
  #     KEYCLOAK_ADMIN: $KEYCLOAK_ADMIN
  #     KEYCLOAK_PASSWORD: $KEYCLOAK_PASSWORD
  #     KEYCLOAK_CLIENT_ID: $KEYCLOAK_CLIENT_ID
  #     KEYCLOAK_SECRET: $KEYCLOAK_SECRET
  #     MODE: development
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     keycloak:
  #       condition: service_healthy
  #   ports:
  #     - 3000:3000
  #   command: ./dist/elysia_backend
    # command: ./scripts/run.sh


volumes:
  postgres_data:
    name: elysia_postgres_data
  pgadmin_data:
    name: elysia_pgadmin_data
  whisper_cache:
    name: elysia_whisper_cache

networks:
  main:
  database:
