# Define an upstream block pointing to your backend service
upstream backend {
    server elysia-backend:3000;
}

upstream frontend {
    server elsyia-frontend:5173;
}

server { # Redirect HTTP to HTTPS
    listen 80;
    return 301 https://$host$request_uri;
}

server { # HTTPS handling
    listen 443 ssl;

    # SSL certificates
    ssl_certificate         /etc/nginx/certs/dev.crt;
    ssl_certificate_key     /etc/nginx/certs/dev.key;

    # Server-level settings
    client_max_body_size 500M;
    large_client_header_buffers 128 16M;
    client_header_buffer_size 16M;
    proxy_buffer_size 128k;
    proxy_buffers 16 128k;
    proxy_busy_buffers_size 256k;

    error_log /var/log/nginx/error.log debug;
    access_log /var/log/nginx/access.log full_debug;

    # Route all traffic to the backend API
    location /api {
        proxy_pass http://backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "keep-alive";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # Log API requests separately
        if ($request_method != OPTIONS) {
            access_log /var/log/nginx/api_access.log full_debug;
        }

        # CORS headers
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS, PUT, PATCH, DELETE" always;
        add_header Access-Control-Allow-Headers "Origin, Authorization, Content-Type, Accept" always;
        add_header Access-Control-Allow-Credentials "true" always;
        add_header Access-Control-Max-Age 86400 always;
    }

    # Route all other requests (UI Frontend)
    location / {
        proxy_pass http://frontend;
        proxy_http_version 1.1;
        proxy_set_header Connection "upgrade";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_ssl_verify off;
    }
}
