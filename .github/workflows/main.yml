# Copyright Â© 2025 Jalapeno Labs

name: Build and test

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

jobs:
  build-langgraph:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        working-directory: langgraph
        run: |
          python -m pip install --upgrade pip poetry
          poetry install --no-root

      - name: Run tests
        working-directory: langgraph
        run: poetry run pytest

      - name: Check types
        working-directory: langgraph
        run: poetry run mypy --strict src

      - name: Setup Docker
        uses: docker/setup-buildx-action@v3

      - name: Install Docker Compose plugin
        run: |
          sudo apt update
          sudo apt install -y docker-compose-plugin

      - name: Build Docker image
        run: docker compose build langgraph

  # build-and-test:
  #   runs-on: ubuntu-latest

  #   container:
  #     # A tad bit risky, but can payoff long term
  #     # Alternative version tag: 23.4.0-bullseye-slim
  #     image: node:latest

  #   steps:
  #     # Setup:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #       with:
  #         # Tells checkout to pull submodules
  #         submodules: 'recursive'
  #         ssh-key: ${{ secrets.SSH_SECRET }}
  #         fetch-depth: 0

  #     - name: Restore cache
  #       id: cache-deps
  #       uses: actions/cache@v4
  #       with:
  #         path: node_modules
  #         key: ${{ runner.os }}-dependencies-${{ hashFiles('yarn.lock') }}
  #         restore-keys: |
  #           ${{ runner.os }}-dependencies-

  #     # Install dependencies & make assets
  #     - name: Install dependencies
  #       id: install
  #       if: steps.cache-deps.outputs.cache-hit != 'true'
  #       run: yarn install

  #     - name: Ensure linted
  #       id: lint
  #       run: yarn lint
  #       continue-on-error: true

  #     # Unit tests
  #     - name: Run unit tests
  #       id: test
  #       run: yarn test
  #       continue-on-error: true

  #     # Typescript checking
  #     - name: Check types
  #       id: typescript
  #       run: yarn tsc --noEmit
  #       continue-on-error: true

  #     # Build from backend common error codes
  #     - name: Check types
  #       id: error-codes
  #       run: yarn update-common
  #       continue-on-error: true

  #     # Build from backend common error codes
  #     - name: Check translation codes
  #       id: translation-consistency
  #       run: yarn ensure-translation
  #       continue-on-error: true

  #     # Build
  #     - name: Build
  #       id: build
  #       run: yarn build
  #       continue-on-error: true

  #     - name: Check if any of the previous steps failed
  #       run: |
  #         # Initialize a failure flag
  #         FAILURE=false

  #         # Check the lint step
  #         if [ "${{ steps.lint.outcome }}" != "success" ]; then
  #           echo "Lint: FAILED"
  #           FAILURE=true
  #         else
  #           echo "Lint: SUCCESS"
  #         fi

  #         # Check the test step
  #         if [ "${{ steps.test.outcome }}" != "success" ]; then
  #           echo "Test: FAILED"
  #           FAILURE=true
  #         else
  #           echo "Test: SUCCESS"
  #         fi

  #         # Check the TypeScript step
  #         if [ "${{ steps.typescript.outcome }}" != "success" ]; then
  #           echo "TypeScript: FAILED"
  #           FAILURE=true
  #         else
  #           echo "TypeScript: SUCCESS"
  #         fi

  #         # Check the error codes step
  #         if [ "${{ steps.error-codes.outcome }}" != "success" ]; then
  #           echo "Error Codes: FAILED"
  #           FAILURE=true
  #         else
  #           echo "Error Codes: SUCCESS"
  #         fi

  #         # Check the translation codes step
  #         if [ "${{ steps.translation-consistency.outcome }}" != "success" ]; then
  #           echo "Translation Codes: FAILED"
  #           FAILURE=true
  #         else
  #           echo "Translation Codes: SUCCESS"
  #         fi

  #         # Check the build step
  #         if [ "${{ steps.build.outcome }}" != "success" ]; then
  #           echo "Build: FAILED"
  #           FAILURE=true
  #         else
  #           echo "Build: SUCCESS"
  #         fi

  #         # Exit with failure if any step failed
  #         if [ "$FAILURE" = true ]; then
  #           echo "One or more steps failed."
  #           exit 1
  #         fi
